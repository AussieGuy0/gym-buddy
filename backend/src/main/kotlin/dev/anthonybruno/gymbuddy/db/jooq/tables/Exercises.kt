/*
 * This file is generated by jOOQ.
 */
package dev.anthonybruno.gymbuddy.db.jooq.tables


import dev.anthonybruno.gymbuddy.db.jooq.Public
import dev.anthonybruno.gymbuddy.db.jooq.keys.EXERCISES_NAME_KEY
import dev.anthonybruno.gymbuddy.db.jooq.keys.EXERCISES_PKEY
import dev.anthonybruno.gymbuddy.db.jooq.tables.records.ExercisesRecord

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row4
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
class Exercises(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ExercisesRecord>?,
    aliased: Table<ExercisesRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ExercisesRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.exercises</code>
         */
        val EXERCISES = Exercises()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ExercisesRecord> = ExercisesRecord::class.java

    /**
     * The column <code>public.exercises.id</code>.
     */
    val ID: TableField<ExercisesRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.exercises.name</code>.
     */
    val NAME: TableField<ExercisesRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "")

    /**
     * The column <code>public.exercises.description</code>.
     */
    val DESCRIPTION: TableField<ExercisesRecord, String?> = createField(DSL.name("description"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.exercises.main_muscle</code>.
     */
    val MAIN_MUSCLE: TableField<ExercisesRecord, String?> = createField(DSL.name("main_muscle"), SQLDataType.CLOB, this, "")

    private constructor(alias: Name, aliased: Table<ExercisesRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<ExercisesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.exercises</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.exercises</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.exercises</code> table reference
     */
    constructor(): this(DSL.name("exercises"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, ExercisesRecord>): this(Internal.createPathAlias(child, key), child, key, EXERCISES, null)
    override fun getSchema(): Schema = Public.PUBLIC
    override fun getIdentity(): Identity<ExercisesRecord, Int?> = super.getIdentity() as Identity<ExercisesRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<ExercisesRecord> = EXERCISES_PKEY
    override fun getKeys(): List<UniqueKey<ExercisesRecord>> = listOf(EXERCISES_PKEY, EXERCISES_NAME_KEY)
    override fun `as`(alias: String): Exercises = Exercises(DSL.name(alias), this)
    override fun `as`(alias: Name): Exercises = Exercises(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Exercises = Exercises(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Exercises = Exercises(name, null)

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row4<Int?, String?, String?, String?> = super.fieldsRow() as Row4<Int?, String?, String?, String?>
}
