/*
 * This file is generated by jOOQ.
 */
package dev.anthonybruno.gymbuddy.db.jooq.tables


import dev.anthonybruno.gymbuddy.db.jooq.Public
import dev.anthonybruno.gymbuddy.db.jooq.keys.WORKOUT_EXERCISES_PKEY
import dev.anthonybruno.gymbuddy.db.jooq.keys.WORKOUT_EXERCISES__WORKOUT_EXERCISES_EXERCISE_ID_FKEY
import dev.anthonybruno.gymbuddy.db.jooq.keys.WORKOUT_EXERCISES__WORKOUT_EXERCISES_WORKOUT_ID_FKEY
import dev.anthonybruno.gymbuddy.db.jooq.tables.records.WorkoutExercisesRecord

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row6
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
class WorkoutExercises(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, WorkoutExercisesRecord>?,
    aliased: Table<WorkoutExercisesRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<WorkoutExercisesRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.workout_exercises</code>
         */
        val WORKOUT_EXERCISES = WorkoutExercises()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<WorkoutExercisesRecord> = WorkoutExercisesRecord::class.java

    /**
     * The column <code>public.workout_exercises.id</code>.
     */
    val ID: TableField<WorkoutExercisesRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.workout_exercises.workout_id</code>.
     */
    val WORKOUT_ID: TableField<WorkoutExercisesRecord, Int?> = createField(DSL.name("workout_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.workout_exercises.exercise_id</code>.
     */
    val EXERCISE_ID: TableField<WorkoutExercisesRecord, Int?> = createField(DSL.name("exercise_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.workout_exercises.sets</code>.
     */
    val SETS: TableField<WorkoutExercisesRecord, Int?> = createField(DSL.name("sets"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.workout_exercises.reps</code>.
     */
    val REPS: TableField<WorkoutExercisesRecord, Int?> = createField(DSL.name("reps"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.workout_exercises.weight</code>.
     */
    val WEIGHT: TableField<WorkoutExercisesRecord, Int?> = createField(DSL.name("weight"), SQLDataType.INTEGER, this, "")

    private constructor(alias: Name, aliased: Table<WorkoutExercisesRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<WorkoutExercisesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.workout_exercises</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.workout_exercises</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.workout_exercises</code> table reference
     */
    constructor(): this(DSL.name("workout_exercises"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, WorkoutExercisesRecord>): this(Internal.createPathAlias(child, key), child, key, WORKOUT_EXERCISES, null)
    override fun getSchema(): Schema = Public.PUBLIC
    override fun getIdentity(): Identity<WorkoutExercisesRecord, Int?> = super.getIdentity() as Identity<WorkoutExercisesRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<WorkoutExercisesRecord> = WORKOUT_EXERCISES_PKEY
    override fun getKeys(): List<UniqueKey<WorkoutExercisesRecord>> = listOf(WORKOUT_EXERCISES_PKEY)
    override fun getReferences(): List<ForeignKey<WorkoutExercisesRecord, *>> = listOf(WORKOUT_EXERCISES__WORKOUT_EXERCISES_WORKOUT_ID_FKEY, WORKOUT_EXERCISES__WORKOUT_EXERCISES_EXERCISE_ID_FKEY)
    fun workouts(): Workouts = Workouts(this, WORKOUT_EXERCISES__WORKOUT_EXERCISES_WORKOUT_ID_FKEY)
    fun exercises(): Exercises = Exercises(this, WORKOUT_EXERCISES__WORKOUT_EXERCISES_EXERCISE_ID_FKEY)
    override fun `as`(alias: String): WorkoutExercises = WorkoutExercises(DSL.name(alias), this)
    override fun `as`(alias: Name): WorkoutExercises = WorkoutExercises(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): WorkoutExercises = WorkoutExercises(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): WorkoutExercises = WorkoutExercises(name, null)

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row6<Int?, Int?, Int?, Int?, Int?, Int?> = super.fieldsRow() as Row6<Int?, Int?, Int?, Int?, Int?, Int?>
}
